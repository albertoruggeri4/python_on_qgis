# Interrogazione PX - MODIFICA DI TUTTI CSV IN CARTELLA - (Crash)

import gdal
import os 
import csv
import glob
import ogr, osr 

os.chdir("C:/LAB_2")




####SISTEMA DI RIFERIEMNTO DEL RASTER

dataset =gdal.Open('dem_lombardia_100m_ED32N.tif')

raster_r = 'dem_lombardia_100m_WGS84_32N.tif'
gdal.Warp(raster_r, dataset, dstSRS = 'EPSG:32632')

dataset = None

######              ###################
def testing (dem, csv_file):
    csvfile_read = open (csv_file)
    reader = csv.DictReader(csvfile_read, delimiter =',')
    
    raster = gdal.Open(dem)
    gt = raster.GetGeoTransform()
    band = raster.GetRasterBand(1)
    arr = band.ReadAsArray()
    #print(arr)
    
    lista = []
    for row in reader:
        
        list_row=[]
        
        utm_x = float(row['xcoord']) #float perch+è con dict reader abbiamo valori in str
        utm_y = float(row['ycoord'])
        px = int((utm_x-gt[0])/gt[1]) #al valore di geotrans prende il valore zero che viene sottrratto ad ogni valore del punto)
        py = int((utm_y-gt[3])/gt[5]) #stessa identica cosa qui. Poi gli dico di darmi tutti valori come int
        #print(utm_x,utm_y)
        #print(px,py)
        #da coordinate cartografiche a coordinate all'interno del nostro raster
        #prendere il valore di coordinata definito da questi indici del raster px e py
        
        
        
        ###quota###
        quota = band.ReadAsArray(px,py, 1, 1)#quota è uguale al valore sulla banda, letta come un array, ma con le particolarità di prendere la coord px e py e con estensione 1 e 1
        #se avessi messo 3 e 3 avrebbe preso un gruppo di punti
        #print(quota) #tipologia array che posso trasformare in int
        quota_int = int(quota)
        
        #andiamo a creare la nuova lista   
        list_row.append(row['COD_REG'])
        list_row.append(row['COD_CM'])
        list_row.append(row['COD_PRO'])
        list_row.append(row['PRO_COM'])
        list_row.append(row['COMUNE'])
        list_row.append(row['NOME_TED'])
        list_row.append(row['FLAG_CM'])
        list_row.append(row['SHAPE_Leng'])
        list_row.append(row['SHAPE_Area'])
        list_row.append(row['xcoord'])
        list_row.append(row['ycoord'])
        list_row.append(quota_int)
        
        lista.append(list_row)
        #print(lista) #la lista di lista
    
    #### CREARE ADESSO IL NUOVO FILE CSV ###
    name = csv_file.split('.')[0]+'_quota.csv'
    csv_out = open(name, 'w')
    
    #adesso devo definire i campi
    fields = ['COD_REG', 'COD_CM', 'COD_PRO', 'PRO_COM', 'COMUNE', 'NOME_TED', 'FLAG_CM', 'SHAPE_Leng', 'SHAPE_Area', 'xcoord', 'ycoord', 'Quota']
    writer = csv.writer(csv_out)
    writer.writerow(fields)
    writer.writerows(lista)
    
    csv_out.close()
    csvfile_read.close()
    #raster = None
    
    
        
    #come per il raster dobbiamo utilizzare un driver 
    driver = ogr.GetDriverByName('ESRI shapefile')
    
    #apro il file questa volta con la funzione CreateDataSource
    shapefile = driver.CreateDataSource(name.split('.')[0] + '_punti_quotati.shp')
    
    
    #open csv che ci servirà per le features (se vedi ?? nei sugg è perchè non hai importato il modulo)
    csvfile = open(name)
    reader = csv.DictReader(csvfile, delimiter = ',')
    # si può fare in un'unica riga:
    # reader = csv.DictReader(open("coordinate_header.csv",delimiter = ',')
    
    
    #create the spatial reference, uso osr --> SR 
    SR =osr.SpatialReference() #creato 
    SR.ImportFromEPSG(32632) #assegnato al csv
    #SR impostiamo uguale ai nostri raster in UTM
    
    #Creare il layer - (name, SR, tipologia shape(puntuale, lineare, poligonale)) wkb=wellknowbase
    layer =shapefile.CreateLayer(name.split('.')[0] + '_punti_quotati.shp', SR, ogr.wkbPoint)
    
    
    # Aggiungiamo i campi dello shp a cui siamo interessati...ogr per creare un campo esterno che poi inserisco in layer  
    
    
    # Definisco nome e tipologia dei vari campi della tabella attributi e li creo
    layer.CreateField(ogr.FieldDefn('Cod_reg', ogr.OFTInteger))
    layer.CreateField(ogr.FieldDefn('Cod_cm', ogr.OFTInteger))
    layer.CreateField(ogr.FieldDefn('Cod_pro', ogr.OFTInteger))
    layer.CreateField(ogr.FieldDefn('Pro_com', ogr.OFTInteger))
    name_field = ogr.FieldDefn('Comune', ogr.OFTString)
    name_field.SetWidth(34) # Definisco lunghezza massima della stringa
    layer.CreateField(name_field)
    layer.CreateField(ogr.FieldDefn('Nome_Ted', ogr.OFTInteger))
    layer.CreateField(ogr.FieldDefn('Flag_cm', ogr.OFTInteger))
    layer.CreateField(ogr.FieldDefn('Shape_Leng', ogr.OFTReal))
    layer.CreateField(ogr.FieldDefn('Shape_Area', ogr.OFTReal))
    name_field_1 = ogr.FieldDefn('xcoord', ogr.OFTReal)
    layer.CreateField(name_field_1)
    layer.CreateField(ogr.FieldDefn('ycoord', ogr.OFTReal))
    layer.CreateField(ogr.FieldDefn('Quota', ogr.OFTInteger))
    
    
    
    #creare le features di ogni riga
    for row in reader: # per ogni riga del csv fai i seguenti comandi:
        layer_defn = layer.GetLayerDefn() # estraggo la definizione del layer
        
        feature = ogr.Feature(layer_defn)
        feature.SetField('Cod_reg', row['COD_REG'])
        feature.SetField('Cod_cm', row['COD_CM'])
        feature.SetField('Cod_pro', row['COD_PRO'])
        feature.SetField('Pro_com', row['PRO_COM'])
        feature.SetField('Comune', row['COMUNE'])
        feature.SetField('Nome_Ted', row['NOME_TED'])
        feature.SetField('Flag_cm', row['FLAG_CM'])
        feature.SetField('Shape_Leng', row['SHAPE_Leng'])
        feature.SetField('Shape_Area', row['SHAPE_Area'])
        feature.SetField('xcoord', row['xcoord'])
        feature.SetField('ycoord', row['ycoord'])
        feature.SetField('Quota', row['Quota'])
        
        
        #create the WKT for the feature using Py string formatting
        wkt = "POINT(%f %f)"%  (float(row['xcoord']), float(row['ycoord'])) # scrivo la geometria in linguaggio wkt
        #print(wkt)
        #point - %f %f --- inserisce in float le coordinate 
        point =ogr.CreateGeometryFromWkt(wkt)
        feature.SetGeometry(point)
    
    
        layer.CreateFeature(feature)
        feature = None 
    
    shapefile = None

for file in glob.glob('*csv'):
    #output = file.split('.')[0]+'_quota.csv' #divisa in due str al .
    dem='dem_lombardia_100m_ED32N.tif'  
    testing(dem, file)
    #parametri? img saranno tutti i file che finiscono in tif (type strg)
