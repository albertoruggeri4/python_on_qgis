
import gdal
import os 
import csv
import glob 

os.chdir("D:/LAB2/Esame/csv")

def testing (dem, csv_file):
    csvfile_read = open (csv_file)
    reader = csv.DictReader(csvfile_read, delimiter =',')
    
    raster = gdal.Open(dem)
    gt = raster.GetGeoTransform()
    band = raster.GetRasterBand(1)
    arr = band.ReadAsArray()
    print(arr)
    
    lista = []
    for row in reader:
        
        list_row=[]
        
        utm_x = float(row['xcoord']) #float perch+è con dict reader abbiamo valori in str
        utm_y = float(row['ycoord'])
        px = int((utm_x-gt[0])/gt[1]) #al valore di geotrans prende il valore zero che viene sottrratto ad ogni valore del punto)
        py = int((utm_y-gt[3])/gt[5]) #stessa identica cosa qui. Poi gli dico di darmi tutti valori come int
        #print(utm_x,utm_y)
        #print(px,py)
        #da coordinate cartografiche a coordinate all'interno del nostro raster
        #prendere il valore di coordinata definito da questi indici del raster px e py
        
        
        
        ###quota###
        quota = band.ReadAsArray(px,py, 1, 1)#quota è uguale al valore sulla banda, letta come un array, ma con le particolarità di prendere la coord px e py e con estensione 1 e 1
        #se avessi messo 3 e 3 avrebbe preso un gruppo di punti
        #print(quota) #tipologia array che posso trasformare in int
        quota_int = int(quota)
        
        #andiamo a creare la nuova lista
        list_row.append(row['COMUNE'])
        #list_row.append(row['SHAPE_Leng'])
        #list_row.append(row['SHAPE_Area'])
        list_row.append(row['xcoord'])
        list_row.append(row['ycoord'])
        list_row.append(quota_int)
        
        lista.append(list_row)
        print(lista) #la lista di lista
    
    #### CREARE ADESSO IL NUOVO FILE CSV ###
    csv_out = open(csv_file.split('.')[0]+'_quota.csv','w')

    #adesso devo definire i campi
    fields = ['COMUNE', 'xcoord', 'ycoord','quota']
    writer = csv.writer(csv_out)
    writer.writerow(fields)
    writer.writerows(lista)
    
    csv_out.close()
    
    csvfile_read.close()
    raster = None
        
'''
dem = 'dem_lombardia_100m_ED32N.tif'   
csv_file = 'comuni_lomb_bergamo.csv'
testing (dem, csv_file)
'''
for file in glob.glob('*csv'):
    #output = file.split('.')[0]+'_quota.csv' #divisa in due str al .
    dem='dem_lombardia_100m_ED32N.tif'  
    testing(dem, file)
#####con il dem UTM -->AttributeError: 'NoneType' object has no attribute 'GetGeoTransform'



##############     DA CSV A SHAPEFILE         #################

##################################################################################################

#come per il raster dobbiamo utilizzare un driver 
driver = ogr.GetDriverByName('ESRI shapefile')

#apro il file questa volta con la funzione CreateDataSource
shapefile = driver.CreateDataSource('file.split('.')[0] + punti_quotati.shp')


#open csv che ci servirà per le features (se vedi ?? nei sugg è perchè non hai importato il modulo)
csvfile = open(csv_out)
reader = csv.DictReader(csvfile, delimiter = ',')
# si può fare in un'unica riga:
# reader = csv.DictReader(open("coordinate_header.csv",delimiter = ',')


#create the spatial reference, uso osr --> SR 
SR =osr.SpatialReference() #creato 
SR.ImportFromEPSG(32632) #assegnato al csv
#SR impostiamo uguale ai nostri raster in UTM

#Creare il layer - (name, SR, tipologia shape(puntuale, lineare, poligonale)) wkb=wellknowbase
layer =shapefile.CreateLayer('file.split('.')[0] + punti_quotati.shp', SR, ogr.wkbPoint)
 
 
# Aggiungiamo i campi dello shp a cui siamo interessati...ogr per creare un campo esterno che poi inserisco in layer  
name_field = ogr.FieldDefn('ID', ogr.OFTString)
name_field.SetWidth(24)
layer.CreateField(name_field) 
#infine lo inserisco nel layer 
#volendo si può fare in una sola riga 
#EX. layer.CreateField(ogr.FieldDefn("Latitude", ogr.OFTReal))

name_field1 = ogr.FieldDefn('xcord', ogr.OFTReal)
layer.CreateField(name_field1)
layer.CreateField(ogr.FieldDefn("ycoord", ogr.OFTReal))
layer.CreateField(ogr.FieldDefn("altitudine", ogr.OFTInteger))

#creare le features di ogni riga
for row in reader: # per ogni riga del csv fai i seguenti comandi:
    layer_defn = layer.GetLayerDefn() # estraggo la definizione del layer
    feature = ogr.Feature(layer_defn) # definisco la feature all'interno della definizione dal layer
    feature.SetField('ID', row['id']) # imposto il valore della feature nel primo campo della tabella attributi
    feature.SetField('xcoord', row['xcoord']) # imposto il valore della feature nel secondo campo della tabella attributi
    feature.SetField('ycoord', row['ycoord']) # imposto il valore della feature nel terzo campo della tabella attributi
    feature.SetField('Altitudine', row['height']) # imposto il valore della feature nel quarto campo della tabella attributi
    
    #create the WKT for the feature using Py string formatting
    wkt = "POINT(%f %f)"%  (float(row['xcoord']), float(row['ycoord'])) # scrivo la geometria in linguaggio wkt
    print(wkt)
    #point - %f %f --- inserisce in float le coordinate 
    
    wkt_new = 'POINT(' + str(row['xcoord']) + ' ' + str(row['ycoord']) +')' # altro modo (forse di più facile lettura ma più complesso da utilizzare) di scrivere la geometria in wkt
    
    #create the point from the Well know Txt
    point = ogr.CreateGeometryFromWkt(wkt_new)
    print(point)
    feature.SetGeometry(point)
    
    
    layer.CreateFeature(feature)
    feature = None 
    
shapefile = None
